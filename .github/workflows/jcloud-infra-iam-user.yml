name: "Wolf IAM User deployment"

on:
  repository_dispatch:
    types: [iam-user-deploy]

jobs:
  token-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('token are not equivalent!')
        if: github.event.client_payload.release_token != env.release_token
        env:
          release_token: ${{ secrets.WOLF_RELEASE_TOKEN }}
  terraform-deploy:
    needs: token-check
    runs-on: ubuntu-latest
    env:
      PROJECT: ${{ github.event.inputs.project }}
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jcloud-infra
          ref: master
          token: ${{ secrets.JINA_DEV_BOT }}
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Terraform Format
        id: fmt
        run: cd $GITHUB_WORKSPACE/devops/iam/project/${{ github.event.client_payload.project }} && terraform fmt -check -diff
      - name: Terraform Init
        id: init
        run: |
          REGION=`cat $GITHUB_WORKSPACE/devops/iam/project/${{ github.event.client_payload.project }}/terraform.tfvars |grep region|awk -F '=' '{print $2}'|tr -d '"'|tr -d "'"`
          REGION=$(eval echo $REGION)
          if [ ! -z $REGION ]; then
            cd $GITHUB_WORKSPACE/devops/iam/project/${{ github.event.client_payload.project }} && cp $GITHUB_WORKSPACE/devops/iam/backends/s3.tf ./ && terraform init -backend-config="key=${{ github.event.client_payload.project }}/nprd/iam/$REGION" -migrate-state
          else
            echo "can't get region from tfvar file, quit!"
            exit 127
          fi
      - name: Terraform Validate
        id: validate
        run: cd $GITHUB_WORKSPACE/devops/iam/project/${{ github.event.client_payload.project }} && terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: cd $GITHUB_WORKSPACE/devops/iam/project/${{ github.event.client_payload.project }} && terraform plan -no-color -input=false
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Terraform Apply
        run: cd $GITHUB_WORKSPACE/devops/iam/project/${{ github.event.client_payload.project }} && terraform apply -auto-approve -input=false
