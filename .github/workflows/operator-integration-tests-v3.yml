name: (jc-operator) Integration Tests v3

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the jina-operator branch
        required: true
        default: main
      env:
        type: choice
        description: Choose the environment (i.e. which cluster to run the integration tests on)
        required: true
        options:
          - ci
          - dev
      destroy_cluster:
        description: Destroy CI cluster after test?
        type: boolean
        default: true
        required: true
      only_api_changed:
        description: Only API related code changed?
        type: boolean
        default: false
        required: false
      only_flow_operator_changed:
        description: Only Flow Operator related code changed?
        type: boolean
        default: false
        required: false
      only_deployment_operator_changed:
        description: Only Deployment Operator related code changed?
        type: boolean
        default: false
        required: false

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

concurrency:
  group: operator-e2e-tests-${{ github.event.inputs.env }}
  cancel-in-progress: false

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      state_key: ${{ steps.output-region.outputs.state_key }}
      host: ${{ steps.output-host.outputs.host }}
    steps:
      - id: output-region
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            echo "state_key=jcloud/ci/eks" >> $GITHUB_OUTPUT
          else
            echo "state_key=jcloud/dev/jcloud/eks/us-east-2" >> $GITHUB_OUTPUT
          fi
      - id: output-host
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            echo "host=api.ci.wolf.jina.ai" >> $GITHUB_OUTPUT
          else
            echo "host=api.dev.wolf.jina.ai" >> $GITHUB_OUTPUT
          fi

  notify-user:
    runs-on: ubuntu-latest
    steps:
      - name: echo who triggered
        run: |
          echo -e "Who? ${{ github.actor }} \nWhat? ${{ github.event.inputs.branch }}"

      - name: Notify who triggered the build
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.env }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\``,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

  build-operator:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Run setup script for Operator
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/operator/config/scripts/setup" ]; then
            cd $GITHUB_WORKSPACE/operator/config/scripts/setup
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:latest operator/
          else
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:${{ github.event.inputs.branch }} operator/
          fi

  build-api-manager:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: Run setup script for API
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/api/test/scripts" ]; then
            cd $GITHUB_WORKSPACE/api/test/scripts
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:latest api/
          else
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:${{ github.event.inputs.branch }} api/
          fi

  terraform-deploy:
    if: ${{ github.event.inputs.env == 'ci' }}
    runs-on: ubuntu-latest
    steps:
      - name: wait for dispatch finish
        shell: bash
        run: |
          rs=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
            https://api.github.com/repos/jina-ai/jina-infra/actions/workflows \
            |jq ".workflows |sort_by(.id)[]| .path=\".github/workflows/jcloud-deploy.yml\""|jq -n '[inputs][-1]')
          id=$(echo $rs|jq ".id")
          create_at=$(echo $rs|jq -r ".created_at")
          if [[ ! -z ${id} ]]; then
            for i in {1..180}
            do
              unfinish_id=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
              https://api.github.com/repos/jina-ai/jina-infra/actions/workflows/${id}/runs \
              |jq ".workflow_runs|sort_by(.id)[]|select(.status!=\"completed\")|.id")
              echo "latest retrive workflow id ${id} status ${unfinish_id}, ${i}"
              if [[ ${#a} -gt 0 ]]; then
                echo "wait for pevious job to finish"
                sleep 6
                if [[ ${i} -eq 180 ]];then
                  echo "wait timeout, quit"
                  exit 0
                fi
              else
                exit 0
              fi
            done
          fi
          exit 0
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        id: dispatch
        with:
          token: ${{ secrets.JINA_DEV_BOT }}
          repository: jina-ai/jina-infra
          event-type: jcloud-infra-deploy
          client-payload: '{"release_token": "${{ secrets.WOLF_INFRA_TOKEN }}", "env": "ci", "destroy_cluster": "false"}'
      - name: wait for dispatch finish
        shell: bash
        run: |
          sleep 3
          rs=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
            https://api.github.com/repos/jina-ai/jina-infra/actions/workflows \
            |jq ".workflows |sort_by(.id)[]| .path=\".github/workflows/jcloud-deploy.yml\""|jq -n '[inputs][-1]')
          id=$(echo $rs|jq ".id")
          create_at=$(echo $rs|jq -r ".created_at")
          if [[ $(expr $(date +%s) - $(data -d ${create_at} +%s)) -le 60 ]]; then
            if [[ ! -z ${id} ]]; then
              for i in {1..300}
              do
                conclusion=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
                https://api.github.com/repos/jina-ai/jina-infra/actions/workflows/${id}/runs \
                |jq ".workflow_runs|sort_by(.id)[]"|jq -nr '[inputs][-1].conclusion')
                echo "latest retrive workflow id ${id} conclusion ${conclusion}, ${i}"
                if [[ ${conclusion} == "success" ]]; then
                  exit 0
                elif [[ ${conclusion} == "failure" ]]; then
                  echo "job failure"
                  exit 1
                fi
                sleep 6
              done
            fi
          fi
          failed to get dispatched job, please check the status of workflow jcloud-deploy.yml in jina-infra repo
          exit 1

  deployment:
    needs: [build-api-manager, build-operator, set-env, terraform-deploy]
    if: |
      always() &&
      needs.build-api-manager.result == 'success' &&
      needs.build-operator.result == 'success' &&
      needs.set-env.result == 'success' &&
      (needs.terraform-deploy.result == 'success' || needs.terraform-deploy.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=${{ needs.set-env.outputs.state_key }}
            region=us-east-1
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/jcloud-admin-role-mbrew
          role-session-name: jcloud-deploy
          aws-region: us-east-2
          unset-current-credentials: true
      - name: helm clean
        run: |
          aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}
          if helm list -n jcloud | grep -q jcloud-operator; then
            helm uninstall -n jcloud jcloud-operator
          fi
          kubectl delete -f $GITHUB_WORKSPACE/deployment/charts/jcloud-operator/crds/ || true
      - name: helm deploy
        if: ${{ github.event.inputs.env == 'ci' }}
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            kubectl create ns jcloud || true
            kubectl delete secret regcred -n jcloud || true
            echo "$WOLF_DOCKER_AUTH" > config.json
            kubectl create secret generic regcred \
            --from-file=.dockerconfigjson=config.json \
            --type=kubernetes.io/dockerconfigjson -n jcloud
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout key.pem -out ci.crt -subj "/O=*.ci.wolf.jina.ai/CN=*.ci.wolf.jina.ai" -addext "subjectAltName = DNS:*.ci.wolf.jina.ai"
            kubectl delete secret ci-wolf-tls -n jcloud || true
            kubectl create secret tls ci-wolf-tls --key key.pem --cert ci.crt -n jcloud
            sudo cp ci.crt /etc/ssl/certs/
          fi
          if [[ -f "$GITHUB_WORKSPACE/api/internals/instances/instances.yml" ]]; then
            kubectl delete configmap jcloud-instances -n jcloud || true
            kubectl create configmap jcloud-instances --from-file=instances.yml=$GITHUB_WORKSPACE/api/internals/instances/instances.yml -n jcloud
          fi
          kubectl apply -f deployment/charts/jcloud-operator/crds/
          kubectl delete secret jcloud-ecr-secret -n jcloud || true
          kubectl create secret docker-registry jcloud-ecr-secret \
          --docker-server=253352124568.dkr.ecr.us-east-2.amazonaws.com \
          --docker-username=AWS \
          --docker-password=$(aws ecr get-login-password --region ${{ steps.remote-state.outputs.region }}) \
          -n jcloud
          helm upgrade --install jcloud-operator deployment/charts/jcloud-operator/ \
          --set "operator.customResources.deployment=true" \
          --set "operator.customResources.flow=true" \
          --set "apimanager.image.repository=253352124568.dkr.ecr.us-east-2.amazonaws.com/jcloud-api-manager" \
          --set "operator.image.repository=253352124568.dkr.ecr.us-east-2.amazonaws.com/jcloud-operator" \
          --set "apimanager.image.tag=${{ github.event.inputs.branch }}" \
          --set "operator.image.tag=${{ github.event.inputs.branch }}" \
          --set "apimanager.ingress.hosts[0]=api.ci.wolf.jina.ai" \
          --set "operator.config.operator.storage.efs.handler=${{ steps.remote-state.outputs.efs_id }}" \
          --set "apimanager.image.pullSecrets[0]=jcloud-ecr-secret" \
          --set "operator.image.pullSecrets[0]=jcloud-ecr-secret" \
          --set "apimanager.ingress.tls[0].secretName=ci-wolf-tls" \
          --set "apimanager.ingress.tls[0].hosts[0]=*.ci.wolf.jina.ai" \
          --set-file "operator.trustCA.ci\.crt=ci.crt"  \
          -f .github/ci/ci-values.yaml \
          -n jcloud

          kubectl set env deploy/deployment-jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
          kubectl set env deploy/flow-jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
          kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}" GRAFANA_AUTH_TOKEN="${{ env.GRAFANA_AUTH_TOKEN }}" JCLOUD_M2M_TOKEN="${{ env.JCLOUD_M2M_TOKEN }}"
        env:
          WOLF_DOCKER_AUTH: ${{ secrets.WOLF_DOCKER_AUTH }}
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
          LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
          GRAFANA_AUTH_TOKEN: ${{ secrets.GRAFANA_AUTH_TOKEN }}
          JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
      - name: helm deploy
        if: ${{ github.event.inputs.env != 'ci' }}
        run: |
          cd $GITHUB_WORKSPACE
          if [[ -f "$GITHUB_WORKSPACE/api/internals/instances/instances.yml" ]]; then
            kubectl delete configmap jcloud-instances -n jcloud || true
            kubectl create configmap jcloud-instances --from-file=instances.yml=$GITHUB_WORKSPACE/api/internals/instances/instances.yml -n jcloud
          fi
          kubectl apply -f deployment/charts/jcloud-operator/crds/
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/deploy.sh -r ${{ steps.remote-state.outputs.region }} -n ${{ steps.remote-state.outputs.cluster_name }} \
            -f .github/ci/${{ github.event.inputs.env }}-values.yaml --api-host ${{ needs.set-env.outputs.host }} \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag latest
          else
            bash ./deployment/scripts/deploy.sh -r ${{ steps.remote-state.outputs.region }} -n ${{ steps.remote-state.outputs.cluster_name }} \
            -f .github/ci/${{ github.event.inputs.env }}-values.yaml --api-host ${{ needs.set-env.outputs.host }} \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag ${{ github.event.inputs.branch }}
          fi

          kubectl set env deploy/deployment-jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
          kubectl set env deploy/flow-jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
          kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}" GRAFANA_AUTH_TOKEN="${{ env.GRAFANA_AUTH_TOKEN }}" JCLOUD_M2M_TOKEN="${{ env.JCLOUD_M2M_TOKEN }}"
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
          LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
          GRAFANA_AUTH_TOKEN: ${{ secrets.GRAFANA_AUTH_TOKEN }}
          JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
      - name: Wait until API is healthy
        run: |
          sleep 15
          for i in {1..300}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" -k https://${{ needs.set-env.outputs.host }}`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
            sleep 1
          done
          exit 1
      - name: "Upload Artifact"
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: actions/upload-artifact@v3
        with:
          name: cert
          path: ${{ github.workspace }}/ci.crt
          retention-days: 1

  prep-testbed-deployment-operator:
    needs: deployment
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.deployment.result == 'success' &&
      (github.event.inputs.only_api_changed == 'false') &&
      (github.event.inputs.only_flow_operator_changed == 'false')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "matrix=$(bash config/scripts/get-all-test-paths.sh jinadeployment)" >> $GITHUB_OUTPUT
        working-directory: ./operator
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  prep-testbed-deployment-api:
    needs: deployment
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.deployment.result == 'success'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "matrix=$(bash config/scripts/get-all-test-paths.sh deployment)" >> $GITHUB_OUTPUT
        working-directory: ./api
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  prep-testbed-flow-operator:
    needs: deployment
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.deployment.result == 'success' &&
      (github.event.inputs.only_api_changed == 'false') &&
      (github.event.inputs.only_deployment_operator_changed == 'false')
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "matrix=$(bash config/scripts/get-all-test-paths.sh flow)" >> $GITHUB_OUTPUT
        working-directory: ./operator
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  prep-testbed-flow-api:
    needs: deployment
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.deployment.result == 'success'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "matrix=$(bash config/scripts/get-all-test-paths.sh flow)" >> $GITHUB_OUTPUT
        working-directory: ./api
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  flow-operator:
    needs: [prep-testbed-flow-operator, set-env]
    if: |
      !cancelled() &&
      (needs.prep-testbed-flow-operator.result == 'success' && needs.set-env.result == 'success')
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-flow-operator.outputs.matrix)}}
    steps:
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/jcloud-admin-role-mbrew
          role-session-name: jcloud-deploy
          aws-region: us-east-2
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=${{ needs.set-env.outputs.state_key }}
            region=us-east-1
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v3
        timeout-minutes: 30
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Download Artifact"
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: actions/download-artifact@v3
        with:
          name: cert
          path: ./operator

      - name: Install Jina
        run: |
          pip3 install jina
          pip3 install docarray==0.21.1

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator

      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}

      - name: Run E2E Integration Test Suites for Flow Operator
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            sudo cp ci.crt /etc/ssl/certs/
          fi
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file test/e2e/flow/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.6.1
        working-directory: ./operator
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.env }}`)
          author_name: ":cloud: Operator Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  flow-api:
    needs: [prep-testbed-flow-api, set-env]
    if: |
      !cancelled() &&
      (needs.prep-testbed-flow-api.result == 'success' && needs.set-env.result == 'success')
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-flow-api.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v3
        timeout-minutes: 30
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Download Artifact"
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: actions/download-artifact@v3
        with:
          name: cert
          path: ./api

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./api

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/jcloud-admin-role-mbrew
          role-session-name: jcloud-deploy
          aws-region: us-east-2
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=${{ needs.set-env.outputs.state_key }}
            region=us-east-1

      - name: Update CI Cluster Config
        run: aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}

      - name: Make sure API is healthy
        run: |
          for i in {1..300}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" -k https://${{ needs.set-env.outputs.host }}`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
            sleep 2
          done
          exit 1

      - name: Run E2E Integration Test Suites for Flow API
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            sudo cp ci.crt /etc/ssl/certs/
          fi
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file test/e2e/flow/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          API_HOST: https://${{ needs.set-env.outputs.host }}
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
          JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
          FIRST_USER_TOKEN: ${{ secrets.JC_CI_FIRST_USER_TOKEN }}
          SECOND_USER_TOKEN: ${{ secrets.JC_CI_SECOND_USER_TOKEN }}
          WOLF_M2M_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_M2M_TOKEN }}
          THIRD_USER_TOKEN: ${{ env._WOLF_NPRD_GENERAL_THIRD_USER_TOKEN }}
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        working-directory: ./api
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.env }}`)
          author_name: ":cloud: API Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  deployment-operator:
    needs: [prep-testbed-deployment-operator, set-env]
    if: |
      !cancelled() &&
      (needs.prep-testbed-deployment-operator.result == 'success' && needs.set-env.result == 'success')
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-deployment-operator.outputs.matrix)}}
    steps:
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/jcloud-admin-role-mbrew
          role-session-name: jcloud-deploy
          aws-region: us-east-2
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=${{ needs.set-env.outputs.state_key }}
            region=us-east-1
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v3
        timeout-minutes: 30
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Download Artifact"
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: actions/download-artifact@v3
        with:
          name: cert
          path: ./operator

      - name: Install Jina
        run: |
          pip3 install jina
          pip3 install docarray==0.21.1

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator

      - name: Update CI Cluster Config
        run: aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}

      - name: Run E2E Integration Test Suites for Deployment Operator
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            sudo cp ci.crt /etc/ssl/certs/
          fi
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file test/e2e/jinadeployment/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.6.1
        working-directory: ./operator
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.env }}`)
          author_name: ":cloud: Operator Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  deployment-api:
    needs: [prep-testbed-deployment-api, set-env]
    if: |
      !cancelled() &&
      (needs.prep-testbed-deployment-api.result == 'success' && needs.set-env.result == 'success')
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 6
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-deployment-api.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v3
        timeout-minutes: 30
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: "Download Artifact"
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: actions/download-artifact@v3
        with:
          name: cert
          path: ./api

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./api

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/jcloud-admin-role-mbrew
          role-session-name: jcloud-deploy
          aws-region: us-east-2
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=${{ needs.set-env.outputs.state_key }}
            region=us-east-1

      - name: Update CI Cluster Config
        run: aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}

      - name: Make sure API is healthy
        run: |
          for i in {1..300}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" -k https://${{ needs.set-env.outputs.host }}`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
            sleep 2
          done
          exit 1

      - name: Run E2E Integration Test Suites for Deployment API
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            sudo cp ci.crt /etc/ssl/certs/
          fi
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file test/e2e/deployment/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          API_HOST: https://${{ needs.set-env.outputs.host }}
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
          JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
          FIRST_USER_TOKEN: ${{ secrets.JC_CI_FIRST_USER_TOKEN }}
          SECOND_USER_TOKEN: ${{ secrets.JC_CI_SECOND_USER_TOKEN }}
          WOLF_M2M_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_M2M_TOKEN }}
          THIRD_USER_TOKEN: ${{ env._WOLF_NPRD_GENERAL_THIRD_USER_TOKEN }}
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        working-directory: ./api
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.env }}`)
          author_name: ":cloud: API Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  restart-tests:
    needs:
      - flow-operator
      - flow-api
      - set-env
    if: |
      !cancelled() &&
      (needs.flow-operator.result == 'success' && needs.flow-api.result == 'success' && needs.set-env.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::458227521111:role/jcloud-admin-role-mbrew
          role-session-name: jcloud-deploy
          aws-region: us-east-2
      - name: Get remote state
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=${{ needs.set-env.outputs.state_key }}
            region=us-east-1

      - name: Update CI Cluster Config
        run: aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}
      - name: "Download Artifact"
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: actions/download-artifact@v3
        with:
          name: cert
          path: ./operator

      - name: Run E2E Integration Test Suites for Operator
        run: |
          if [[ ${{ github.event.inputs.env }} == 'ci' ]]; then
            sudo cp ci.crt /etc/ssl/certs/
          fi
          ginkgo --focus-file controllers/test/restart/restart_test.go -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.6.1
        working-directory: ./operator
        timeout-minutes: 30

  compatibility-test:
    needs:
      - restart-tests
    if: |
      !cancelled() &&
      needs.restart-tests.result == 'success' && 
      (github.event.inputs.branch != 'main') && (github.event.inputs.only_api_changed == 'false')
    uses: jina-ai/cloud-ops/.github/workflows/operator-backward-compatibility-tests.yml@master
    secrets: inherit
    with:
      branch: ${{ github.event.inputs.branch }}
      env: ${{ github.event.inputs.env }}

  notify-test:
    needs:
      - compatibility-test
    if: always()
    runs-on: ubuntu-latest
    outputs:
      destroy: ${{ steps.check.outputs.destroy }}
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Notify success
        if: env.WORKFLOW_CONCLUSION != 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.env }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\` \n :question: Status? :white_check_mark:`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

      - name: Notify failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.env }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\` \n :question: Status? :x: `,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

  terraform-destroy:
    needs:
      - flow-operator
      - flow-api
      - deployment-operator
      - deployment-api
      - compatibility-test
      - set-env
    if: |
      always() &&
      github.event.inputs.env == 'ci' &&
      (needs.flow-operator.result == 'success' && needs.flow-api.result == 'success') ||
      (needs.deployment-operator.result == 'success' && needs.deployment-api.result == 'success') &&
      needs.set-env.result == 'success' &&
      (needs.terraform-deploy.result == 'success' || needs.terraform-deploy.result == 'skipped') 
    runs-on: ubuntu-latest
    env:
      DIRECTORY: ${{ github.workspace }}/devops/jcloud/ci/eks
      AWS_CONFIG_FILE: ${{ github.workspace }}/devops/jina/dev/init/aws_config_actioner
    steps:
      - name: configure aws credentials
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::458227521111:role/github-reader-jina-infra
          role-session-name: jinainfraapply
          aws-region: us-east-1
      - name: Get remote state
        if: ${{ github.event.inputs.env == 'ci' }}
        uses: dflook/terraform-remote-state@v1
        id: remote-state
        with:
          backend_type: s3
          backend_config: |
            bucket=jina-infra-terraform-state
            key=jcloud/ci/eks
            region=us-east-1
      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.env != 'ci' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Clean flows and JinaDeployments
        if: |
          github.event.inputs.env == 'ci' && 
          github.event.inputs.destroy_cluster != 'false' && 
          steps.remote-state.outputs.region != '' && steps.remote-state.outputs.cluster_name != ''
        run: |
          aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_name }}
          kubectl delete flow --all --all-namespaces || true
          kubectl delete jd --all --all-namespaces || true
          for i in $(aws ec2 describe-instances --filter "Name=tag:karpenter.sh/discovery,Values=${{ steps.remote-state.outputs.cluster_name }}" --query 'Reservations[].Instances[].InstanceId' --output text)
          do
            echo "terminate instance ${i}"
            aws ec2 terminate-instances --instance-ids ${i} || true
          done
          sleep 30
      - name: Clean flows and JinaDeployments
        if: ${{ github.event.inputs.env == 'dev' }}
        run: |
          aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}
          kubectl delete flow --all --all-namespaces || true
          kubectl delete jd --all --all-namespaces || true
      - name: wait for dispatch finish
        shell: bash
        if: |
          github.event.inputs.env == 'ci' && 
          github.event.inputs.destroy_cluster != 'false'
        run: |
          rs=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
            https://api.github.com/repos/jina-ai/jina-infra/actions/workflows \
            |jq ".workflows |sort_by(.id)[]| .path=\".github/workflows/jcloud-deploy.yml\""|jq -n '[inputs][-1]')
          id=$(echo $rs|jq ".id")
          create_at=$(echo $rs|jq -r ".created_at")
          if [[ ! -z ${id} ]]; then
            for i in {1..180}
            do
              unfinish_id=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
              https://api.github.com/repos/jina-ai/jina-infra/actions/workflows/${id}/runs \
              |jq ".workflow_runs|sort_by(.id)[]|select(.status!=\"completed\")|.id")
              echo "latest retrive workflow id ${id} status ${unfinish_id}, ${i}"
              if [[ ${#a} -gt 0 ]]; then
                echo "wait for pevious job to finish"
                sleep 6
                if [[ ${i} -eq 180 ]];then
                  echo "wait timeout, quit"
                  exit 0
                fi
              else
                exit 0
              fi
            done
          fi
          exit 0
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        if: |
          github.event.inputs.env == 'ci' && 
          github.event.inputs.destroy_cluster != 'false'
        id: dispatch
        with:
          token: ${{ secrets.JINA_DEV_BOT }}
          repository: jina-ai/jina-infra
          event-type: jcloud-infra-deploy
          client-payload: '{"release_token": "${{ secrets.WOLF_INFRA_TOKEN }}", "env": "ci", "destroy_cluster": "true"}'
      - name: wait for dispatch finish
        shell: bash
        if: |
          github.event.inputs.env == 'ci' && 
          github.event.inputs.destroy_cluster != 'false'
        run: |
          sleep 3
          rs=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
            https://api.github.com/repos/jina-ai/jina-infra/actions/workflows \
            |jq ".workflows |sort_by(.id)[]| .path=\".github/workflows/jcloud-deploy.yml\""|jq -n '[inputs][-1]')
          id=$(echo $rs|jq ".id")
          create_at=$(echo $rs|jq -r ".created_at")
          if [[ $(expr $(date +%s) - $(data -d ${create_at} +%s)) -le 60 ]]; then
            if [[ -z ${url} ]]; then
              for i in {1..300}
              do
                status=$(curl -H "Authorization: token ${{ secrets.JINA_DEV_BOT }}" \
                https://api.github.com/repos/jina-ai/jina-infra/actions/workflows/${id}/runs \
                |jq ".workflow_runs|sort_by(.id)[]"|jq -nr '[inputs][-1].status')
                echo "latest retrive workflow id ${id} status ${status}, ${i}"
                if [[ ${status} == "completed" ]]; then
                  exit 0
                fi
                sleep 6
              done
            fi
          fi
          failed to get dispatched job, please check the status of workflow jcloud-deploy.yml in jina-infra repo
          exit 1
