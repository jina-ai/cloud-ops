name: "(jc-operator) Jcloud operator manual deployment"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the jina-operator branch
        required: true
        default: main
      deploy_token:
        description: Deploy Token
        default: ""
        required: true
      environment:
        description: Deploy Environment
        required: true
      eks_region:
        description: EKS Region
        default: "us-east-1"
        required: true

jobs:
  token-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('token are not equivalent!')
        if: github.event.client_payload.release_token != env.release_token
        env:
          release_token: ${{ secrets.JCLOUD_DEPLOY_TOKEN }}
  build-operator:
    needs: token-check
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.build_image.outputs.sha }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for Operator
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/operator/config/scripts/setup" ]; then
            cd $GITHUB_WORKSPACE/operator/config/scripts/setup
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        if: github.event.inputs.environment != 'prod'
      - name: Set environment variables
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE/operator
          if [[ $GIT_BRANCH == 'main' ]]; then
            TAG="latest"
          else
            if [[ "${{ github.event.inputs.image_tag }}" == "" ]]; then
              TAG="${{ env.GIT_BRANCH }}"
            else
              TAG="${{ github.event.inputs.image_tag }}"
            fi
          fi
          bash ../deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:${TAG}
          image_fullname=`docker inspect --format='{{index .RepoDigests 0}}' 253352124568.dkr.ecr.us-east-2.amazonaws.com/jcloud-operator:${TAG}`
          sha=`echo ${image_fullname}|cut -d @ -f 2`
          echo "sha=${sha#sha256:}" >> $GITHUB_OUTPUT
  build-api-manager:
    needs: token-check
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.build_image.outputs.sha }}
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for API
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/api/test/scripts" ]; then
            cd $GITHUB_WORKSPACE/api/test/scripts
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        if: github.event.inputs.environment != 'prod'
      - name: Set environment variables
        run: |
          # Short name for current branch. For PRs, use target branch (base ref)
          GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
          echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          if [[ $GIT_BRANCH == 'main' ]]; then
            TAG="latest"
          else
            if [[ "${{ github.event.inputs.image_tag }}" == "" ]]; then
              TAG="${{ env.GIT_BRANCH }}"
            else
              TAG="${{ github.event.inputs.image_tag }}"
            fi
          fi
          bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:${TAG} api/
          image_fullname=`docker inspect --format='{{index .RepoDigests 0}}' 253352124568.dkr.ecr.us-east-2.amazonaws.com/jcloud-api-manager:${TAG}`
          sha=`echo ${image_fullname}|cut -d @ -f 2`
          echo "sha=${sha#sha256:}" >> $GITHUB_OUTPUT
  deployment:
    needs: [build-api-manager, build-operator]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment }} == "CI" || ${{ github.event.inputs.environment }} == "dev" || ${{ github.event.inputs.environment }} == "tmp" || ${{ github.event.inputs.environment }} == "prod"
    env:
      ENVIRONMENT: ${{ github.event.inputs.environment }}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: actions/checkout@v3
      with:
        repository: jina-ai/jina-operator
        ref: ${{ github.event.inputs.branch }}
        token: ${{ secrets.JINA_DEV_BOT }}
    - name: Get remote state
      uses: dflook/terraform-remote-state@v1
      id: remote-state
      with:
        backend_type: s3
        backend_config: |
          bucket=jina-terraform-state
          key=jcloud/${{ github.event.inputs.environment }}/eks/${{ github.event.inputs.eks_region }}
          region=us-east-2
    - name: Set environment variables
      run: |
        # Short name for current branch. For PRs, use target branch (base ref)
        GIT_BRANCH=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}
        echo "GIT_BRANCH=$GIT_BRANCH" >> $GITHUB_ENV
    - name: helm clean
      run: |
        aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_id }}
        for i in `helm list -n jcloud|grep -v NAME|awk '{printf $1}'`
        do
          helm uninstall ${i} -n jcloud
          kubectl delete -f $GITHUB_WORKSPACE/deployment/charts/jcloud-operator/crds/ || true
        done
      if: github.event.inputs.environment != 'prod'
    - name: "Update Helm Charts Image sha"
      run: |
        sudo snap install yq
        yq -i ".apimanager.image.sha=\"${{needs.build-api-manager.outputs.sha}}\"" .github/ci/${{ github.event.inputs.environment }}-values.yaml
        yq -i ".operator.image.sha=\"${{needs.build-operator.outputs.sha}}\"" .github/ci/${{ github.event.inputs.environment }}-values.yaml
        cat .github/ci/${{ github.event.inputs.environment }}-values.yaml
    - name: helm deploy
      run: |
        cd $GITHUB_WORKSPACE
        aws eks update-kubeconfig --region ${{ steps.remote-state.outputs.region }} --name ${{ steps.remote-state.outputs.cluster_id }}
        kubectl apply -f deployment/charts/jcloud-operator/crds/
        if [[ $GIT_BRANCH == 'main' ]]; then
          bash ./deployment/scripts/deploy.sh -r ${{ steps.remote-state.outputs.region }} -n ${{ steps.remote-state.outputs.cluster_id }} \
          -f .github/ci/${{ github.event.inputs.environment }}-values.yaml \
          --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag latest
        else
          if [[ "${{ github.event.inputs.image_tag }}" == "" ]]; then
            bash ./deployment/scripts/deploy.sh -r ${{ steps.remote-state.outputs.region }} -n ${{ steps.remote-state.outputs.cluster_id }} \
            -f .github/ci/${{ github.event.inputs.environment }}-values.yaml \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag ${{ env.GIT_BRANCH }}
          else
            bash ./deployment/scripts/deploy.sh -r ${{ steps.remote-state.outputs.region }} -n ${{ steps.remote-state.outputs.cluster_id }} \
            -f .github/ci/${{ github.event.inputs.environment }}-values.yaml \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag ${{ github.event.inputs.image_tag }}
          fi
        fi
    - name: set env
      run: |
        kubectl set env deploy/jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
        kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}"
      env:
        MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
