name: (jc-operator) Compatibility Tests

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the jina-operator branch
        required: true
      manual_run:
        description: Please check if this job is manually run.
        default: false
        required: false
        type: boolean
      env:
        type: choice
        description: Choose the environment (i.e. which cluster to run the integration tests on)
        required: true
        options:
          - CI
          - dev
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      manual_run:
        default: false
        required: false
        type: boolean
      env:
        type: string
        required: true
        default: CI

concurrency:
  group: operator-compatibility-tests-${{ github.event.inputs.env }}
  cancel-in-progress: false

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.output-region.outputs.region }}
      cluster: ${{ steps.output-cluster.outputs.cluster }}
      host: ${{ steps.output-host.outputs.host }}
    steps:
      - id: output-region
        run: |
          if [[ ${{ github.event.inputs.env }} == 'CI' ]]; then
            echo "region=eu-west-3" >> $GITHUB_OUTPUT
          else
            echo "region=us-east-2" >> $GITHUB_OUTPUT
          fi
      - id: output-cluster
        run: |
          if [[ ${{ github.event.inputs.env }} == 'CI' ]]; then
            echo "cluster=jcloud-CI-eks-episr" >> $GITHUB_OUTPUT
          else
            echo "cluster=jcloud-dev-eks-lpzje" >> $GITHUB_OUTPUT
          fi
      - id: output-host
        run: |
          if [[ ${{ github.event.inputs.env }} == 'CI' ]]; then
            echo "host=api-ci-episr.wolf.jina.ai" >> $GITHUB_OUTPUT
          else
            echo "host=api-dev-lpzje.wolf.jina.ai" >> $GITHUB_OUTPUT
          fi


  build-operator-from-branch:
    # Build only when it's triggered directly; the image has been built if this is triggered from integration tests.
    if: ${{ inputs.manual_run }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for Operator
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/operator/config/scripts/setup" ]; then
            cd $GITHUB_WORKSPACE/operator/config/scripts/setup
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:latest operator/
          else
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:${{ github.event.inputs.branch }} operator/
          fi

  build-api-manager-from-branch:
    # Build only when it's triggered directly; the image has been built if this is triggered from integration tests.
    if: ${{ inputs.manual_run }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for API
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/api/test/scripts" ]; then
            cd $GITHUB_WORKSPACE/api/test/scripts
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:${{ github.event.inputs.branch }} api/

  deployment-from-main:
    needs: set-env
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID  }}
        aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: actions/checkout@v3
      with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
    - name: helm clean
      run: |
        aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}
        if helm list -n jcloud | grep -q jcloud-operator; then
          helm uninstall -n jcloud jcloud-operator
        fi
        kubectl delete -f $GITHUB_WORKSPACE/deployment/charts/jcloud-operator/crds/ || true
    - name: helm deploy
      run: |
        cd $GITHUB_WORKSPACE
        kubectl apply -f deployment/charts/jcloud-operator/crds/
        bash ./deployment/scripts/deploy.sh -r ${{ needs.set-env.outputs.region }} -n ${{ needs.set-env.outputs.cluster }} \
        -f .github/ci/${{ github.event.inputs.env }}-values.yaml \
        --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag latest
        
        kubectl set env deploy/jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
        kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}" JCLOUD_M2M_TOKEN="${{ env.JCLOUD_M2M_TOKEN }}"
      env:
        MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
        JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
    - name: Wait until API is healthy
      run: |
        for i in {1..180}
        do
          STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://${{ needs.set-env.outputs.host }}`
          if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
            exit 0
          fi
          echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
          sleep 1
        done
        exit 1
    - name: Wait until Operator is healthy
      run: |
        kubectl get pods -n jcloud -l=app.kubernetes.io/name=jcloud-operator
        for i in {1..60}
        do
          if kubectl get pods -n jcloud -l=app.kubernetes.io/name=jcloud-operator | grep "Running"; then
            echo "Operator is now running as expected, continue."
            exit 0
          fi
          echo "Operator is not in running state, retry."
          sleep 1
        done
        exit 1

  compatibility-tests-setup:
    needs:
      - deployment-from-main
      - set-env
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: [controllers/test/compatibility/baseline_flows_setup_test.go]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      
      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Cache Python Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      
      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.6.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}

      - name: Run Compatibility Test Suites for Operator
        run: ginkgo --focus-file ${{ matrix.test-path }} -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
        working-directory: ./operator
        timeout-minutes: 20

  deployment-from-branch:
    needs:
      - compatibility-tests-setup
      - build-operator-from-branch
      - build-api-manager-from-branch
      - set-env
    if: |
      always() &&
      (needs.compatibility-tests-setup.result == 'success') &&
      (needs.build-operator-from-branch.result == 'success' || needs.build-operator-from-branch.result == 'skipped') &&
      (needs.build-api-manager-from-branch.result == 'success' || needs.build-api-manager-from-branch.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID  }}
        aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - uses: actions/checkout@v3
      with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
    - name: helm clean
      run: |
        aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}
        if helm list -n jcloud | grep -q jcloud-operator; then
          helm uninstall -n jcloud jcloud-operator
        fi
    - name: helm deploy
      run: |
        cd $GITHUB_WORKSPACE
        kubectl apply -f deployment/charts/jcloud-operator/crds/
        bash ./deployment/scripts/deploy.sh -r ${{ needs.set-env.outputs.region }} -n ${{ needs.set-env.outputs.cluster }} \
        -f .github/ci/${{ github.event.inputs.env }}-values.yaml \
        --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag ${{ github.event.inputs.branch }}

        kubectl set env deploy/jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
        kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}" JCLOUD_M2M_TOKEN="${{ env.JCLOUD_M2M_TOKEN }}"
      env:
        MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
        JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
    - name: Wait until API is healthy
      run: |
        for i in {1..180}
        do
          STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://${{ needs.set-env.outputs.host }}`
          if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
            exit 0
          fi
          echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
          sleep 1
        done
        exit 1
    - name: Wait until Operator is healthy
      run: |
        kubectl get pods -n jcloud -l=app.kubernetes.io/name=jcloud-operator
        for i in {1..60}
        do
          if kubectl get pods -n jcloud -l=app.kubernetes.io/name=jcloud-operator | grep "Running"; then
            echo "Operator is now running as expected, continue."
            exit 0
          fi
          echo "Operator is not in running state, retry."
          sleep 1
        done
        exit 1

  backward-compatibility-tests:
    needs:
      - deployment-from-branch
      - set-env
    if: |
      always() &&
      (needs.deployment-from-branch.result == 'success')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: [controllers/test/compatibility/backward_compatibility_test.go]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      
      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Cache Python Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      
      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.6.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}

      - name: Run Compatibility Test Suites for Operator
        run: ginkgo --focus-file ${{ matrix.test-path }} -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
        working-directory: ./operator
        timeout-minutes: 20

  success-all-test:
    needs: 
      - backward-compatibility-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
