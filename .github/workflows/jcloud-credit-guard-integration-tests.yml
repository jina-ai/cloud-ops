name: "(jc-credit-guard) Jcloud CG integration tests"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the branch
        required: true
        default: main
      deploy_token:
        description: Deploy Token
        default: ""
        required: true
      environment:
        description: Environment to run tests in
        required: true
      eks_region:
        description: EKS Region
        default: "us-east-1"
        required: true
      should_redeploy_operator:
        description: Also re-deploy Operator & API?
        type: boolean
        default: false
        required: true

concurrency:
  group: cg-e2e-tests-${{ github.event.inputs.environment }}
  cancel-in-progress: false

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.output-region.outputs.region }}
      cluster: ${{ steps.output-cluster.outputs.cluster }}
      host: ${{ steps.output-host.outputs.host }}
    steps:
      - id: output-region
        run: |
          if [[ ${{ github.event.inputs.environment }} == 'CI' ]]; then
            echo "region=eu-west-3" >> $GITHUB_OUTPUT
          else
            echo "region=us-east-2" >> $GITHUB_OUTPUT
          fi
      - id: output-cluster
        run: |
          if [[ ${{ github.event.inputs.environment }} == 'CI' ]]; then
            echo "cluster=jcloud-CI-eks-episr" >> $GITHUB_OUTPUT
          else
            echo "cluster=jcloud-dev-eks-lpzje" >> $GITHUB_OUTPUT
          fi
      - id: output-host
        run: |
          if [[ ${{ github.event.inputs.environment }} == 'CI' ]]; then
            echo "host=api-ci-episr.wolf.jina.ai" >> $GITHUB_OUTPUT
          else
            echo "host=api-dev-lpzje.wolf.jina.ai" >> $GITHUB_OUTPUT
          fi

  token-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('token are not equivalent!')
        if: github.event.inputs.deploy_token != env.deploy_token
        env:
          deploy_token: ${{ secrets.JCLOUD_DEPLOY_TOKEN }}

  deploy-credit-guard:
    needs: token-check
    uses: jina-ai/cloud-ops/.github/workflows/jcloud-credit-guard-deploy.yml@master
    secrets: inherit
    with:
      branch: ${{ github.event.inputs.branch }}
      deploy_token: ${{ github.event.inputs.deploy_token }}
      environment: ${{ github.event.inputs.environment }}
      eks_region: ${{ github.event.inputs.eks_region }}

  deploy-operator-and-api:
    needs: token-check
    if: ${{ github.event.inputs.should_redeploy_operator != 'false' }}
    uses: jina-ai/cloud-ops/.github/workflows/operator-manual-deploy-pipeline.yml@master
    secrets: inherit
    with:
      branch: ${{ github.event.inputs.branch }}
      deploy_token: ${{ github.event.inputs.deploy_token }}
      environment: ${{ github.event.inputs.environment }}
      eks_region: ${{ github.event.inputs.eks_region }}

  prep-testbed:
    needs: [deploy-credit-guard, deploy-operator-and-api]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash config/scripts/get-all-test-paths.sh)"
        working-directory: ./creditguard
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  run-tests:
    needs: [prep-testbed, set-env]
    if: always()
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.8.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./creditguard

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true

      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}

      - name: Make sure API is healthy
        run: |
          for i in {1..300}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://${{ needs.set-env.outputs.host }}`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
            sleep 2
          done
          exit 1

      - name: Run E2E Integration Test Suites for Credit Guard
        run: |
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file test/e2e/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          API_HOST: https://${{ needs.set-env.outputs.host }}
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
          JCLOUD_M2M_TOKEN: ${{ secrets.JCLOUD_M2M_TOKEN }}
          FIRST_USER_TOKEN: ${{ secrets.JC_CI_FIRST_USER_TOKEN }}
          SECOND_USER_TOKEN: ${{ secrets.JC_CI_SECOND_USER_TOKEN }}
          WOLF_M2M_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_M2M_TOKEN }}
          THIRD_USER_TOKEN: ${{ env._WOLF_NPRD_GENERAL_THIRD_USER_TOKEN }}
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        working-directory: ./creditguard
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.environment }}`)
          author_name: ":cloud: Credit Guard Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  success-all-test:
    needs:
      - run-tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2

      - name: Notify success
        if: env.WORKFLOW_CONCLUSION != 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Credit Guard Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.environment }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\` \n :question: Status? :white_check_mark:`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

      - name: Notify failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Credit Guard Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.environment }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\` \n :question: Status? :x: `,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1

      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
