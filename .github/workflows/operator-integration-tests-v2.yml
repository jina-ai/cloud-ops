name: (jc-operator) Integration Tests v2

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the jina-operator branch
        required: true
        default: main
      only_api_changed:
        description: Check the box only if API related code was changed
        type: boolean
        default: false
        required: false

concurrency:
  group: operator-e2e-tests
  cancel-in-progress: false

jobs:
  notify-user:
    runs-on: ubuntu-latest
    steps:
      - name: Notify who triggered the build
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\``,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

  build-operator:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for Operator
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/operator/config/scripts/setup" ]; then
            cd $GITHUB_WORKSPACE/operator/config/scripts/setup
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE/operator
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ../deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:latest
          else
            bash ../deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:${{ github.event.inputs.branch }}
          fi

  build-api-manager:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for API
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/api/test/scripts" ]; then
            cd $GITHUB_WORKSPACE/api/test/scripts
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:latest api/
          else
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:${{ github.event.inputs.branch }} api/
          fi

  deployment:
    needs: [build-api-manager, build-operator]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: helm clean
        run: |
          aws eks update-kubeconfig --region eu-west-3 --name jcloud-CI-eks-episr
          for i in `helm list -n jcloud|grep -v NAME|awk '{printf $1}'`
          do
            helm uninstall ${i} -n jcloud
          done
      - name: helm deploy
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/deploy.sh -r eu-west-3 -n jcloud-CI-eks-episr \
            -f .github/ci/CI-values.yaml --api-host "api-ci-episr.wolf.jina.ai" \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag latest
          else
            bash ./deployment/scripts/deploy.sh -r eu-west-3 -n jcloud-CI-eks-episr \
            -f .github/ci/CI-values.yaml --api-host "api-ci-episr.wolf.jina.ai" \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag ${{ github.event.inputs.branch }}
          fi

          kubectl set env deploy/jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
          kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}" GRAFANA_AUTH_TOKEN="${{ env.GRAFANA_AUTH_TOKEN }}"
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
          LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
          GRAFANA_AUTH_TOKEN: ${{ secrets.GRAFANA_AUTH_TOKEN }}

      - name: Wait until API is healthy
        run: |
          for i in {1..180}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://api-ci-episr.wolf.jina.ai`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API api-ci-episr.wolf.jina.ai returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API api-ci-episr.wolf.jina.ai returns ${STATUS_CODE}, retry ${1}."
            sleep 1
          done
          exit 1

  prep-testbed-operator:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash config/scripts/get-all-test-paths.sh)"
        working-directory: ./operator
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  prep-testbed-api:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash config/scripts/get-all-test-paths.sh)"
        working-directory: ./api
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  now-prep-testbed:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout now repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/now
          fetch-depth: 0
      - name: Get now latest tag
        id: latest
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
    outputs:
      tag: ${{ steps.latest.outputs.tag }}

  now-integration-tests:
    needs: now-prep-testbed
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true
      - name: Checkout now repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/now
          ref: ${{ needs.now-prep-testbed.outputs.tag }}
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Prepare environment
        run: |
          sudo apt update && sudo apt install ffmpeg
          python -m pip install --upgrade pip
          python -m pip install wheel
          export JCLOUD_LOGLEVEL=DEBUG
          pip install --no-cache-dir ".[full,test]"
      - name: Add JCloud auth token
        run: |
          mkdir -p ~/.jina
          touch ~/.jina/config.json
          echo "{\"auth_token\": \"${_WOLF_NPRD_GENERAL_WOLF_TOKEN}\"}" > ~/.jina/config.json
          cat ~/.jina/config.json
      - name: tmate session
        uses: mxschmitt/action-tmate@v3
      - name: Run tests
        run: |
          export S3_IMAGE_TEST_DATA_PATH=$_WOLF_NPRD_GENERAL_S3_IMAGE_TEST_DATA_PATH
          export JCLOUD_API=https://api-ci-episr.wolf.jina.ai
          export DOCKER_PASSWORD=$_WOLF_NPRD_GENERAL_DOCKER_PASSWORD
          export HUBBLE_AUTH_TOKEN=$_WOLF_NPRD_GENERAL_HUBBLE_AUTH_TOKEN
          export DOCKER_USERNAME=$_WOLF_NPRD_GENERAL_DOCKER_USERNAME
          export JINA_DEV_BOT=$_WOLF_NPRD_GENERAL_JINA_DEV_BOT
          export JINA_OPTOUT_TELEMETRY=$_WOLF_NPRD_GENERAL_JINA_OPTOUT_TELEMETRY
          export NETLIFY_AUTH_TOKEN1=$_WOLF_NPRD_GENERAL_NETLIFY_AUTH_TOKEN1
          export NETLIFY_SITE_ID=$_WOLF_NPRD_GENERAL_NETLIFY_SITE_ID
          export NOW_ANNLITE_EXECUTOR_SECRET=$_WOLF_NPRD_GENERAL_NOW_ANNLITE_EXECUTOR_SECRET
          export NOW_AUTH_EXECUTOR_SECRET=$_WOLF_NPRD_GENERAL_NOW_AUTH_EXECUTOR_SECRET
          export NOW_AUTOCOMPLETE_SECRET=$_WOLF_NPRD_GENERAL_NOW_AUTOCOMPLETE_SECRET
          export NOW_ELASTIC_EXECUTOR_SECRET=$_WOLF_NPRD_GENERAL_NOW_ELASTIC_EXECUTOR_SECRET
          export NOW_OCR_EXECUTOR_SECRET=$_WOLF_NPRD_GENERAL_NOW_OCR_EXECUTOR_SECRET
          export NOW_POSTPROCESSOR_EXECUTOR_SECRET=$_WOLF_NPRD_GENERAL_NOW_POSTPROCESSOR_EXECUTOR_SECRET
          export NOW_PREPROCESSOR_JCLOUD_TOKEN=$_WOLF_NPRD_GENERAL_NOW_PREPROCESSOR_JCLOUD_TOKEN
          export NOW_PREPROCESSOR_REPO=$_WOLF_NPRD_GENERAL_NOW_PREPROCESSOR_REPO
          export NOW_PREPROCESSOR_REPO_TOKEN=$_WOLF_NPRD_GENERAL_NOW_PREPROCESSOR_REPO_TOKEN
          export NOW_QDRANT_EXECUTOR_SECRET=$_WOLF_NPRD_GENERAL_NOW_QDRANT_EXECUTOR_SECRET
          export NOW_STAGING_FLORIAN=$_WOLF_NPRD_GENERAL_NOW_STAGING_FLORIAN
          export PERSONAL_ACCESS_TOKEN=$_WOLF_NPRD_GENERAL_PERSONAL_ACCESS_TOKEN
          export TWINE_PASSWORD=$_WOLF_NPRD_GENERAL_TWINE_PASSWORD
          export TWINE_USERNAME=$_WOLF_NPRD_GENERAL_TWINE_USERNAME
          export WOLF_EXAMPLES_TOKEN=$_WOLF_NPRD_GENERAL_WOLF_EXAMPLES_TOKEN
          export WOLF_TOKEN=$_WOLF_NPRD_GENERAL_WOLF_TOKEN
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          pytest -v -m remote tests/integration/test_end_to_end.py

  operator-tests:
    needs: prep-testbed-operator
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-operator.outputs.matrix)}}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Install Jina
        run: |
          pip3 install jina
      - name: Install Dependencies
        run: |
          go mod tidy -v
          go get github.com/onsi/ginkgo/v2/ginkgo/generators@v2.1.6 
          go get github.com/onsi/ginkgo/v2/ginkgo/internal@v2.1.6
          go get github.com/onsi/ginkgo/v2/ginkgo/labels@v2.1.6
          go install github.com/onsi/ginkgo/v2/ginkgo
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region eu-west-3 --name jcloud-CI-eks-episr
      - name: Run E2E Integration Test Suites for Operator
        run: ginkgo --focus-file ${{ matrix.test-path }} -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
        working-directory: ./operator
        timeout-minutes: 20
      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}`
          author_name: ":cloud: Operator Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  api-tests:
    needs: prep-testbed-api
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-api.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Dependencies
        run: |
          go mod tidy -v
          go get github.com/onsi/ginkgo/v2/ginkgo/generators@v2.1.6 
          go get github.com/onsi/ginkgo/v2/ginkgo/internal@v2.1.6
          go get github.com/onsi/ginkgo/v2/ginkgo/labels@v2.1.6
          go install github.com/onsi/ginkgo/v2/ginkgo
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./api

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region eu-west-3 --name jcloud-CI-eks-episr

      - name: Make sure API is healthy
        run: |
          for i in {1..180}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://api-ci-episr.wolf.jina.ai`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API api-ci-episr.wolf.jina.ai returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API api-ci-episr.wolf.jina.ai returns ${STATUS_CODE}, retry ${1}."
            sleep 2
          done
          exit 1

      - name: Run E2E Integration Test Suites for API
        run: ginkgo -p --focus-file ${{ matrix.test-path }} -v --progress ./...
        env:
          API_HOST: https://api-ci-episr.wolf.jina.ai
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
          FIRST_USER_TOKEN: ${{ secrets.JC_CI_FIRST_USER_TOKEN }}
          SECOND_USER_TOKEN: ${{ secrets.JC_CI_SECOND_USER_TOKEN }}
        working-directory: ./api
        timeout-minutes: 20

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}`
          author_name: ":cloud: API Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  compatibility-test:
    needs:
      - operator-tests
      - api-tests
    if: ${{ (github.event.inputs.branch != 'main') && (github.event.inputs.only_api_changed == 'false') }}
    uses: jina-ai/cloud-ops/.github/workflows/operator-backward-compatibility-tests.yml@master
    secrets: inherit
    with:
      branch: ${{ github.event.inputs.branch }}

  success-all-test:
    needs: compatibility-test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
