name: (jc-operator) Integration Tests v2

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Pass the jina-operator branch
        required: true
        default: main
      env:
        type: choice
        description: Choose the environment (i.e. which cluster to run the integration tests on)
        required: true
        options:
          - CI
          - dev
      only_api_changed:
        description: Only API related code changed?
        type: boolean
        default: false
        required: false
      skip_now_tests:
        description: Skip now integration tests?
        type: boolean
        default: false
        required: false

concurrency:
  group: operator-e2e-tests-${{ github.event.inputs.env }}
  cancel-in-progress: false

jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      region: ${{ steps.output-region.outputs.region }}
      cluster: ${{ steps.output-cluster.outputs.cluster }}
      host: ${{ steps.output-host.outputs.host }}
    steps:
      - id: output-region
        run: |
          if [[ ${{ github.event.inputs.env }} == 'CI' ]]; then
            echo "region=eu-west-3" >> $GITHUB_OUTPUT
          else
            echo "region=us-east-2" >> $GITHUB_OUTPUT
          fi
      - id: output-cluster
        run: |
          if [[ ${{ github.event.inputs.env }} == 'CI' ]]; then
            echo "cluster=jcloud-CI-eks-episr" >> $GITHUB_OUTPUT
          else
            echo "cluster=jcloud-dev-eks-lpzje" >> $GITHUB_OUTPUT
          fi
      - id: output-host
        run: |
          if [[ ${{ github.event.inputs.env }} == 'CI' ]]; then
            echo "host=api-ci-episr.wolf.jina.ai" >> $GITHUB_OUTPUT
          else
            echo "host=api-dev-lpzje.wolf.jina.ai" >> $GITHUB_OUTPUT
          fi

  notify-user:
    runs-on: ubuntu-latest
    steps:
      - name: echo who triggered
        run: |
          echo -e "Who? ${{ github.actor }} \nWhat? ${{ github.event.inputs.branch }}"

      - name: Notify who triggered the build
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.env }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\``,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

  build-operator:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for Operator
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/operator/config/scripts/setup" ]; then
            cd $GITHUB_WORKSPACE/operator/config/scripts/setup
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE/operator
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ../deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:latest
          else
            bash ../deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-operator:${{ github.event.inputs.branch }}
          fi

  build-api-manager:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      - name: Run setup script for API
        run: |
          # cd is a hack to work with other branches (remove later)
          if [ -d "$GITHUB_WORKSPACE/api/test/scripts" ]; then
            cd $GITHUB_WORKSPACE/api/test/scripts
            go mod tidy
            go run setup.go
          fi
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
      - name: Build Image
        id: build_image
        run: |
          cd $GITHUB_WORKSPACE
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:latest api/
          else
            bash ./deployment/scripts/docker-build-push.sh 253352124568.dkr.ecr.us-east-2.amazonaws.com jcloud-api-manager:${{ github.event.inputs.branch }} api/
          fi

  deployment:
    needs: [build-api-manager, build-operator, set-env]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID  }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - name: helm clean
        run: |
          aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}
          for i in `helm list -n jcloud|grep -v NAME|awk '{printf $1}'`
          do
            helm uninstall ${i} -n jcloud
            kubectl delete -f $GITHUB_WORKSPACE/deployment/charts/jcloud-operator/crds/ || true
          done
      - name: helm deploy
        run: |
          cd $GITHUB_WORKSPACE
          kubectl apply -f deployment/charts/jcloud-operator/crds/
          if [[ ${{ github.event.inputs.branch }} == 'main' ]]; then
            bash ./deployment/scripts/deploy.sh -r ${{ needs.set-env.outputs.region }} -n ${{ needs.set-env.outputs.cluster }} \
            -f .github/ci/${{ github.event.inputs.env }}-values.yaml --api-host ${{ needs.set-env.outputs.host }} \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag latest
          else
            bash ./deployment/scripts/deploy.sh -r $${{ needs.set-env.outputs.region }} -n ${{ needs.set-env.outputs.cluster }} \
            -f .github/ci/${{ github.event.inputs.env }}-values.yaml --api-host ${{ needs.set-env.outputs.host }} \
            --registry 253352124568.dkr.ecr.us-east-2.amazonaws.com --tag ${{ github.event.inputs.branch }}
          fi

          kubectl set env deploy/jcloud-operator -n jcloud MONGO_URI="${{ env.MONGO_URI }}"
          kubectl set env deploy/jcloud-operator-api-manager -n jcloud MONGO_URI="${{ env.MONGO_URI }}" LIST_USER_TOKEN="${{ env.LIST_USER_TOKEN }}" GRAFANA_AUTH_TOKEN="${{ env.GRAFANA_AUTH_TOKEN }}"
        env:
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
          LIST_USER_TOKEN: ${{ secrets.LIST_USER_TOKEN }}
          GRAFANA_AUTH_TOKEN: ${{ secrets.GRAFANA_AUTH_TOKEN }}

      - name: Wait until API is healthy
        run: |
          sleep 15
          for i in {1..300}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://${{ needs.set-env.outputs.host }}`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
            sleep 1
          done
          exit 1

  prep-testbed-operator:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash config/scripts/get-all-test-paths.sh)"
        working-directory: ./operator
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  prep-testbed-api:
    needs: deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}
      - id: set-matrix
        run: |
          sudo apt-get install jq
          echo "::set-output name=matrix::$(bash config/scripts/get-all-test-paths.sh)"
        working-directory: ./api
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  prep-testbed-now:
    needs: deployment
    if: ${{ (github.event.inputs.skip_now_tests == 'false') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout now Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/now
      - id: set-matrix
        run: |
          echo "::set-output name=matrix::$(find -type f -name 'test_*.py' | xargs -n1 basename | jq -R . | jq -cs)"
        working-directory: ./tests/integration/remote
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  now-integration-tests:
    needs: [prep-testbed-now, set-env]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-now.outputs.matrix)}}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true
      - name: Checkout now repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/now
          fetch-depth: 0
      - name: Get now latest tag
        id: latest
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Checkout now repo with latest tag
        uses: actions/checkout/@v3
        with:
          repository: jina-ai/now
          ref: ${{ steps.latest.outputs.tag }}
      - name: Prepare environment
        run: |
          sudo apt update && sudo apt install ffmpeg
          python -m pip install --upgrade pip
          python -m pip install wheel
          pip install --no-cache-dir ".[full,test]"
          pip install --no-cache-dir -U jcloud
      - name: Add JCloud auth token
        run: |
          mkdir -p ~/.jina
          touch ~/.jina/config.json
          echo "{\"auth_token\": \"${_WOLF_NPRD_GENERAL_WOLF_TOKEN}\"}" > ~/.jina/config.json
          cat ~/.jina/config.json
      - name: Run tests
        run: |
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "tests/integration/remote/{}" | xargs)
          pytest -v ${focus_files}
        env:
          S3_CUSTOM_DATA_PATH: ${{ env._WOLF_NPRD_GENERAL_S3_CUSTOM_DATA_PATH }}
          S3_CUSTOM_MM_DATA_PATH: ${{ env._WOLF_NPRD_GENERAL_S3_CUSTOM_MM_DATA_PATH }}
          JCLOUD_API: https://${{ needs.set-env.outputs.host }}
          DOCKER_PASSWORD: ${{ env._WOLF_NPRD_GENERAL_DOCKER_PASSWORD }}
          HUBBLE_AUTH_TOKEN: ${{ env._WOLF_NPRD_GENERAL_HUBBLE_AUTH_TOKEN }}
          DOCKER_USERNAME: ${{ env._WOLF_NPRD_GENERAL_DOCKER_USERNAME }}
          JINA_DEV_BOT: ${{ env._WOLF_NPRD_GENERAL_JINA_DEV_BOT }}
          JINA_OPTOUT_TELEMETRY: ${{ env._WOLF_NPRD_GENERAL_JINA_OPTOUT_TELEMETRY }}
          NETLIFY_AUTH_TOKEN1: ${{ env._WOLF_NPRD_GENERAL_NETLIFY_AUTH_TOKEN1 }}
          NETLIFY_SITE_ID: ${{ env._WOLF_NPRD_GENERAL_NETLIFY_SITE_ID }}
          NOW_ANNLITE_EXECUTOR_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_ANNLITE_EXECUTOR_SECRET }}
          NOW_AUTH_EXECUTOR_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_AUTH_EXECUTOR_SECRET }}
          NOW_AUTOCOMPLETE_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_AUTOCOMPLETE_SECRET }}
          NOW_ELASTIC_EXECUTOR_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_ELASTIC_EXECUTOR_SECRET }}
          NOW_OCR_EXECUTOR_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_OCR_EXECUTOR_SECRET }}
          NOW_POSTPROCESSOR_EXECUTOR_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_POSTPROCESSOR_EXECUTOR_SECRET }}
          NOW_PREPROCESSOR_JCLOUD_TOKEN: ${{ env._WOLF_NPRD_GENERAL_NOW_PREPROCESSOR_JCLOUD_TOKEN }}
          NOW_PREPROCESSOR_REPO: ${{ env._WOLF_NPRD_GENERAL_NOW_PREPROCESSOR_REPO }}
          NOW_PREPROCESSOR_REPO_TOKEN: ${{ env._WOLF_NPRD_GENERAL_NOW_PREPROCESSOR_REPO_TOKEN }}
          NOW_QDRANT_EXECUTOR_SECRET: ${{ env._WOLF_NPRD_GENERAL_NOW_QDRANT_EXECUTOR_SECRET }}
          NOW_STAGING_FLORIAN: ${{ env._WOLF_NPRD_GENERAL_NOW_STAGING_FLORIAN }}
          PERSONAL_ACCESS_TOKEN: ${{ env._WOLF_NPRD_GENERAL_PERSONAL_ACCESS_TOKEN }}
          TWINE_PASSWORD: ${{ env._WOLF_NPRD_GENERAL_TWINE_PASSWORD }}
          TWINE_USERNAME: ${{ env._WOLF_NPRD_GENERAL_TWINE_USERNAME }}
          WOLF_EXAMPLES_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_EXAMPLES_TOKEN }}
          WOLF_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JCLOUD_LOGLEVEL: DEBUG
          JINA_AUTH_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_TOKEN }}

  operator:
    needs: [prep-testbed-operator, set-env]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-operator.outputs.matrix)}}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Jina
        run: |
          pip3 install jina

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.6.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./operator

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}

      - name: Run E2E Integration Test Suites for Operator
        run: |
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file controllers/test/e2e/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.6.1
        working-directory: ./operator
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.env }}`)
          author_name: ":cloud: Operator Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  api:
    needs: [prep-testbed-api, set-env]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        test-path: ${{fromJson(needs.prep-testbed-api.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: jina-ai/jina-operator
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.JINA_DEV_BOT }}

      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Golang 1.18
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Set up Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Install Dependencies
        run: |
          go install github.com/onsi/ginkgo/v2/ginkgo@v2.6.1
          go get github.com/onsi/gomega/...
          go mod tidy -v
        working-directory: ./api

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.WOLF_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.WOLF_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Read secrets from AWS Secrets Manager into environment variables
        uses: abhilash1in/aws-secrets-manager-action@v2.1.0
        with:
          secrets: |
            /wolf/nprd/general
          parse-json: true
      - name: Update Cluster Config
        run: aws eks update-kubeconfig --region ${{ needs.set-env.outputs.region }} --name ${{ needs.set-env.outputs.cluster }}

      - name: Make sure API is healthy
        run: |
          for i in {1..300}
          do
            STATUS_CODE=`curl -s -o /dev/null -w "%{http_code}" https://${{ needs.set-env.outputs.host }}`
            if [[ ${STATUS_CODE} -ge 200 ]] && [[ ${STATUS_CODE} -lt 300 ]]; then
              echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, continue."
              exit 0
            fi
            echo "API ${{ needs.set-env.outputs.host }} returns ${STATUS_CODE}, retry ${1}."
            sleep 2
          done
          exit 1

      - name: Run E2E Integration Test Suites for API
        run: |
          focus_files=$(echo ${{ matrix.test-path }} | xargs -n1 | xargs -I{} echo "--focus-file test/e2e/{}" | xargs)
          ginkgo ${focus_files} -v --progress ./...
        env:
          API_HOST: https://${{ needs.set-env.outputs.host }}
          ACK_GINKGO_RC: true
          ACK_GINKGO_DEPRECATIONS: 2.5.0
          FIRST_USER_TOKEN: ${{ secrets.JC_CI_FIRST_USER_TOKEN }}
          SECOND_USER_TOKEN: ${{ secrets.JC_CI_SECOND_USER_TOKEN }}
          WOLF_M2M_TOKEN: ${{ env._WOLF_NPRD_GENERAL_WOLF_M2M_TOKEN }}
          MONGO_URI: ${{ secrets.JC_CI_MONGO_URI }}
        working-directory: ./api
        timeout-minutes: 30

      - if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: eventName,job
          text: |
            :no_entry: `${{ matrix.test-path }}` failed for branch `${{ github.event.inputs.branch }}` (cluster: `${{ github.event.inputs.env }}`)
          author_name: ":cloud: API Integration Tests"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}

  compatibility-test:
    needs:
      - operator
      - api
      - set-env
    if: ${{ (github.event.inputs.branch != 'main') && (github.event.inputs.only_api_changed == 'false') }}
    uses: jina-ai/cloud-ops/.github/workflows/operator-backward-compatibility-tests.yml@master
    secrets: inherit
    with:
      branch: ${{ github.event.inputs.branch }}
      env: ${{ github.event.inputs.env }}

  success-all-test:
    needs: [compatibility-test, now-integration-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2

      - name: Notify success
        if: env.WORKFLOW_CONCLUSION != 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.env }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\` \n :question: Status? :white_check_mark:`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

      - name: Notify failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,author
          custom_payload: |
            {
              attachments: [{
                text: `:jcloud: Operator + API Tests \n :face_with_raised_eyebrow: Who? :point_right: ${{ github.actor }} \n :face_with_raised_eyebrow: Where? :point_right: ${{ github.event.inputs.env }} \n :face_with_raised_eyebrow: What? :point_right: \`${{ github.event.inputs.branch }}\` \n :question: Status? :x: `,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WOLF_SLACK_NIGHTLY_TESTS_WEBHOOK }}

      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1

      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
